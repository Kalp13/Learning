@page "/books/update/{id}"

@using System.IO
@attribute [Authorize(Roles = "Administrator")]

@inject IBookRepository bookRepo
@inject IAuthorRepository authorRepo
@inject IFileUpload fileUpload
@inject NavigationManager navigationManager

<h3>BookUpdate</h3>
<hr />
<br />
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again"></ErrorMessage>
}
else if (this.Model == null)
{
    <LoadingMessage Message="Loading Author Details"></LoadingMessage>
}
else 
{
    <EditForm Model="Model" OnValidSubmit="UpdateBook">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="title">Book Title</label>
            <InputText @bind-Value="Model.Title" class="form-control" id="firstname"></InputText>
        </div>
        <div class="form-group">
            <label for="isbn">ISBN</label>
            <InputText @bind-Value="Model.Isbn" class="form-control" id="lastname"></InputText>
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber @bind-Value="Model.Price" class="form-control" id="biography"></InputNumber>
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <select @bind="Model.AuthorId" class="form-control" id="author">
                <option value="">-- Select Author --</option>
                @if (Authors != null)
                {
                    foreach (var author in Authors)
                    {
                        <option value="@author.Id">@author.FirstName @author.LastName</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="image">Book Cover Photo</label>
            <BlazorInputFile.InputFile OnChange="HandleFileSelection"></BlazorInputFile.InputFile>
            @if (isInvalidFileType)
            {
                <ErrorMessage Message="Invalid File Type"></ErrorMessage>
            }

            @if (!String.IsNullOrWhiteSpace(imageDataUrl))
            {
                <img src="@imageDataUrl" style="height:100px; width:100px"/>
            }
            else if (!String.IsNullOrWhiteSpace(Model.Image))
            {
                <img src="uploads/@Model.Image" style="height:100px; width:100px"/>
            }
        </div>

        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil"></span>
            Update
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span>
            Cancel
        </button>
    </EditForm>
}

@code {
    [Parameter]
    public string Id { get;  set; }

    private BookModel Model = new BookModel();
    private IList<AuthorModel> Authors;
    private bool isFailed = false;
    private IFileListEntry file;
    private string imageDataUrl;
    private bool isInvalidFileType;
    private bool isFileChanged = false;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(this.Id);
        Authors = await authorRepo.Get(Endpoints.AuthorsEndpoint);
        this.Model = await this.bookRepo.Get(Endpoints.BookssEndpoint, id);
    }

    private async Task UpdateBook()
    {
        if (!isInvalidFileType)
        {
            if (file != null)
            {
                var extension = Path.GetExtension(file?.Name);
                var pictureId = Guid.NewGuid().ToString().Replace("-", "");
                var pictureName = $"{pictureId}{extension}";
                await fileUpload.UploadFile(file, pictureName).ConfigureAwait(false);
                Model.Image = pictureName;
            }
            else if (isFileChanged && file == null)
            {
                Model.Image = String.Empty;
            }

            isFailed = !(await this.bookRepo.Update(Endpoints.BookssEndpoint, Model, Model.Id));
            if (!isFailed)
            {
                BackToList();
            }
        }
    }

    private void BackToList(){
        this.navigationManager.NavigateTo("/books");
    }

    private async Task HandleFileSelection(IFileListEntry[] files) 
    {
        file = files.FirstOrDefault();
        isFileChanged = true;
        if (file != null)
        {
            var name = file.Name;
            isInvalidFileType = !(file.Name.Contains(".jpg") || file.Name.Contains(".png") || file.Name.Contains(".jpeg"));
            if (!isInvalidFileType)
            {
                var stream = new MemoryStream();
                await file.Data.CopyToAsync(stream);
                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(stream.ToArray());
                imageDataUrl = string.Format("data:image/png;base64,{0}", imageBase64Data);
            }
            else
            {
                imageDataUrl = String.Empty;
            }
        }
        else 
        {
            isInvalidFileType = false;
        }
    }
}
