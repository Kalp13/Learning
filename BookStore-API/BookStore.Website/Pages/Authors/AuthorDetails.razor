@page "/authors/details/{Id}"

@inject IAuthorRepository authorRepo
@inject NavigationManager navigationManager

<h3>View Author Details</h3>

@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again"/>
}
else if (this.Model == null)
{
    <LoadingMessage Message="Loading Author Details"></LoadingMessage>
}
else
{
    <div class="col-md-6">
        <table class="table table-responsive">
            <tr>
                <td>First Name</td>
                <td>@Model.FirstName</td>
            </tr>
            <tr>
                <td>Last Name</td>
                <td>@Model.LastName</td>
            </tr>
            <tr>
                <td>Biography</td>
                <td>@Model.Bio</td>
            </tr>
        </table>
        <br />
        @if (Model.Books == null || Model.Books.Count < 1)
        {
            <div class="alert alert-dismissible alert-secondary">
                No Books for @Model.FirstName @Model.LastName
            </div>
        }
        else 
        {
            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    <h4>Books</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in @Model.Books)
                    {
                        <li class="list-group-item">@book.Title - @book.Price <a href="/books/details/@book.Id">View</a></li>
                    }
                </ul>
            </div>
        }
    </div>
}

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>

@code {
    [Parameter]
    public string Id { get;  set; }

    private AuthorModel Model = new AuthorModel();

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(this.Id);
        this.Model = await this.authorRepo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList(){
        this.navigationManager.NavigateTo("/authors");
    }
}
